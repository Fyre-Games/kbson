/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.jershell.kbson

import com.github.jershell.kbson.models.OptionalClass
import com.github.jershell.kbson.models.Simple
import kotlinx.serialization.Serializable
import kotlinx.serialization.UnstableDefault
import kotlinx.serialization.json.Json
import kotlin.math.PI
import kotlin.test.Test
import kotlin.test.assertEquals


@Serializable
data class EBA(val bin: Double)

@Serializable
data class AAA(
        val mmpp: Map<EBA, Byte>
)

@UnstableDefault
class DependenciesTest {
//    @Test
//    fun JsonStringify() {
//        val target = Simple("value_string", 20.5, 0.1f, 42L, '€', true, 42)
//        assertEquals("""{"valueString":"text","valueDouble":42.0,"valueFloat":42.0,"valueInt":42}""", Json.nonstrict.stringify(Simple.serializer(), target))
//    }

    @Test
    fun mapSP() {
        val exp = """
            {"mmpp":[{"bin":2.0},20,{"bin":3.0},30]}
        """.trimIndent()

        val target = AAA(mapOf(EBA(2.0) to 20.toByte(), EBA(3.0) to 30.toByte()))
        assertEquals(exp, Json.nonstrict.stringify(AAA.serializer(), target))

        assertEquals(target, Json.nonstrict.parse(AAA.serializer(), exp))

    }

    @Test
    fun JsonParse() {
        val target = Simple("text", PI, 42.0f, 42L, '€', true, 42)
        assertEquals(target, Json.nonstrict.parse(Simple.serializer(),
                """
                    {
                    "valueLong": 42,
                    "valueChar": "€",
                    "valueBool": true,
                    "valueString":"text",
                    "valueDouble":$PI,
                    "valueFloat":42.0,
                    "valueInt":42
                    }
                """.trimIndent()))
    }

    @Test
    fun JsonParseNullableClass() {
        val n = OptionalClass()
        val res = Json
                .nonstrict
                .parse(OptionalClass.serializer(), """{}""")

        assertEquals(n.reqString, res.reqString)
    }
}